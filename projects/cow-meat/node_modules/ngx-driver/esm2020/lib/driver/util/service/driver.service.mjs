import { HttpHeaders } from "@angular/common/http";
import { Inject, Injectable } from '@angular/core';
import { Subject } from "rxjs";
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./local-storage.service";
import * as i3 from "ngx-liburg-icon";
export class DriverService {
    constructor(_httpClient, _localStorage, _spinnerService, environment) {
        this._httpClient = _httpClient;
        this._localStorage = _localStorage;
        this._spinnerService = _spinnerService;
        this.environment = environment;
        this.header = new HttpHeaders;
        this.driverData = new Subject();
        let tokenFromLocalStorage = _localStorage.geItem('token');
        this.header = new HttpHeaders().set('Authorization', 'Bearer ' + tokenFromLocalStorage);
    }
    getDataDriver(requestData = { items: 10, page: 1 }) {
        this._httpClient.get(`${this.environment.api}/driver/description/${requestData.items}/${requestData.page}`, { headers: this.header })
            .subscribe(resp => {
            this._spinnerService.sendValue(true);
            this.driverData.next(resp);
        });
    }
    patchDataDriver(row) {
        return this._httpClient.patch(`${this.environment.api}/driver`, row, { headers: this.header });
    }
}
DriverService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: DriverService, deps: [{ token: i1.HttpClient }, { token: i2.LocalStorageService }, { token: i3.SpinnerService }, { token: 'env' }], target: i0.ɵɵFactoryTarget.Injectable });
DriverService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: DriverService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: DriverService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: i2.LocalStorageService }, { type: i3.SpinnerService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: ['env']
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJpdmVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtZHJpdmVyL3NyYy9saWIvZHJpdmVyL3V0aWwvc2VydmljZS9kcml2ZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWEsV0FBVyxFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFDN0QsT0FBTyxFQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFakQsT0FBTyxFQUFhLE9BQU8sRUFBQyxNQUFNLE1BQU0sQ0FBQzs7Ozs7QUFPekMsTUFBTSxPQUFPLGFBQWE7SUFLeEIsWUFDbUIsV0FBd0IsRUFDeEIsYUFBbUMsRUFDbkMsZUFBZ0MsRUFDMUIsV0FBaUI7UUFIdkIsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFDeEIsa0JBQWEsR0FBYixhQUFhLENBQXNCO1FBQ25DLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQUMxQixnQkFBVyxHQUFYLFdBQVcsQ0FBTTtRQVJuQyxXQUFNLEdBQWlCLElBQUksV0FBVyxDQUFDO1FBRXZDLGVBQVUsR0FBdUIsSUFBSSxPQUFPLEVBQVksQ0FBQztRQU85RCxJQUFJLHFCQUFxQixHQUFHLGFBQWEsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDMUQsSUFBSSxDQUFDLE1BQU0sR0FBaUIsSUFBSSxXQUFXLEVBQUUsQ0FBQyxHQUFHLENBQy9DLGVBQWUsRUFDZixTQUFTLEdBQUcscUJBQXFCLENBQ2xDLENBQUM7SUFDSixDQUFDO0lBRU0sYUFBYSxDQUFDLGNBQTJCLEVBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFDO1FBQ2xFLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUNsQixHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyx1QkFBdUIsV0FBVyxDQUFDLEtBQUssSUFBSSxXQUFXLENBQUMsSUFBSSxFQUFFLEVBQ3JGLEVBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUMsQ0FDdkI7YUFDRSxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDaEIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDckMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDN0IsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRU0sZUFBZSxDQUFDLEdBQVk7UUFDakMsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FDM0IsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsU0FBUyxFQUNoQyxHQUFHLEVBQ0gsRUFBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBQyxDQUN2QixDQUFDO0lBQ0osQ0FBQzs7MEdBbENVLGFBQWEsNkdBU2QsS0FBSzs4R0FUSixhQUFhLGNBRkEsTUFBTTsyRkFFbkIsYUFBYTtrQkFIekIsVUFBVTttQkFBQztvQkFDRSxVQUFVLEVBQUUsTUFBTTtpQkFDbkI7OzBCQVVSLE1BQU07MkJBQUMsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SHR0cENsaWVudCwgSHR0cEhlYWRlcnN9IGZyb20gXCJAYW5ndWxhci9jb21tb24vaHR0cFwiO1xuaW1wb3J0IHtJbmplY3QsIEluamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtTcGlubmVyU2VydmljZX0gZnJvbSBcIm5neC1saWJ1cmctaWNvblwiO1xuaW1wb3J0IHtPYnNlcnZhYmxlLCBTdWJqZWN0fSBmcm9tIFwicnhqc1wiO1xuaW1wb3J0IHtEcml2ZXIsIFBhZ2luYXRpb259IGZyb20gXCIuLi9pbnRlcmZhY2VzXCI7XG5pbXBvcnQge0xvY2FsU3RvcmFnZVNlcnZpY2V9IGZyb20gXCIuL2xvY2FsLXN0b3JhZ2Uuc2VydmljZVwiO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgICAgICAgICAgIHByb3ZpZGVkSW46ICdyb290JyxcbiAgICAgICAgICAgIH0pXG5leHBvcnQgY2xhc3MgRHJpdmVyU2VydmljZSB7XG4gIHB1YmxpYyBoZWFkZXIgOiBIdHRwSGVhZGVycyA9IG5ldyBIdHRwSGVhZGVycztcblxuICBwdWJsaWMgZHJpdmVyRGF0YSA6IFN1YmplY3Q8RHJpdmVyW10+ID0gbmV3IFN1YmplY3Q8RHJpdmVyW10+KCk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBfaHR0cENsaWVudCA6IEh0dHBDbGllbnQsXG4gICAgcHJpdmF0ZSByZWFkb25seSBfbG9jYWxTdG9yYWdlIDogTG9jYWxTdG9yYWdlU2VydmljZSxcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9zcGlubmVyU2VydmljZSA6IFNwaW5uZXJTZXJ2aWNlLFxuICAgIEBJbmplY3QoJ2VudicpIHByaXZhdGUgZW52aXJvbm1lbnQgOiBhbnkpIHtcbiAgICBsZXQgdG9rZW5Gcm9tTG9jYWxTdG9yYWdlID0gX2xvY2FsU3RvcmFnZS5nZUl0ZW0oJ3Rva2VuJyk7XG4gICAgdGhpcy5oZWFkZXIgICAgICAgICAgICAgICA9IG5ldyBIdHRwSGVhZGVycygpLnNldChcbiAgICAgICdBdXRob3JpemF0aW9uJyxcbiAgICAgICdCZWFyZXIgJyArIHRva2VuRnJvbUxvY2FsU3RvcmFnZSxcbiAgICApO1xuICB9XG5cbiAgcHVibGljIGdldERhdGFEcml2ZXIocmVxdWVzdERhdGEgOiBQYWdpbmF0aW9uID0ge2l0ZW1zOiAxMCwgcGFnZTogMX0pIDogdm9pZCB7XG4gICAgdGhpcy5faHR0cENsaWVudC5nZXQ8RHJpdmVyW10+KFxuICAgICAgYCR7dGhpcy5lbnZpcm9ubWVudC5hcGl9L2RyaXZlci9kZXNjcmlwdGlvbi8ke3JlcXVlc3REYXRhLml0ZW1zfS8ke3JlcXVlc3REYXRhLnBhZ2V9YCxcbiAgICAgIHtoZWFkZXJzOiB0aGlzLmhlYWRlcn0sXG4gICAgKVxuICAgICAgLnN1YnNjcmliZShyZXNwID0+IHtcbiAgICAgICAgdGhpcy5fc3Bpbm5lclNlcnZpY2Uuc2VuZFZhbHVlKHRydWUpO1xuICAgICAgICB0aGlzLmRyaXZlckRhdGEubmV4dChyZXNwKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgcHVibGljIHBhdGNoRGF0YURyaXZlcihyb3cgOiBEcml2ZXIpIDogT2JzZXJ2YWJsZTxEcml2ZXI+IHtcbiAgICByZXR1cm4gdGhpcy5faHR0cENsaWVudC5wYXRjaDxEcml2ZXI+KFxuICAgICAgYCR7dGhpcy5lbnZpcm9ubWVudC5hcGl9L2RyaXZlcmAsXG4gICAgICByb3csXG4gICAgICB7aGVhZGVyczogdGhpcy5oZWFkZXJ9LFxuICAgICk7XG4gIH1cbn1cblxuIl19