import * as i4 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { Injectable, Inject, Component, NgModule, Optional, SkipSelf } from '@angular/core';
import * as i5 from 'ngx-liburg';
import { TableMaterialModule } from 'ngx-liburg';
import * as i3 from 'ngx-liburg-icon';
import { SpinnerModule } from 'ngx-liburg-icon';
import * as i1$1 from '@angular/router';
import { RouterModule } from '@angular/router';
import * as i1 from '@angular/common/http';
import { HttpHeaders } from '@angular/common/http';
import { Subject } from 'rxjs';

class LocalStorageService {
    constructor() { }
    geItem(item) {
        if (item !== undefined)
            return JSON.parse(localStorage.getItem(item));
        throw new Error("Put KEy");
    }
    getKey(index) {
        localStorage.key(index);
    }
    setItem(item, value) {
        localStorage.setItem(item, JSON.stringify(value));
    }
    removeItem(item) {
        localStorage.removeItem(item.toString());
    }
    removeAll() {
        localStorage.clear();
    }
}
LocalStorageService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: LocalStorageService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
LocalStorageService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: LocalStorageService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: LocalStorageService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return []; } });

class DriverService {
    constructor(_httpClient, _localStorage, _spinnerService, environment) {
        this._httpClient = _httpClient;
        this._localStorage = _localStorage;
        this._spinnerService = _spinnerService;
        this.environment = environment;
        this.header = new HttpHeaders;
        this.driverData = new Subject();
        let tokenFromLocalStorage = _localStorage.geItem('token');
        this.header = new HttpHeaders().set('Authorization', 'Bearer ' + tokenFromLocalStorage);
    }
    getDataDriver(requestData = { items: 10, page: 1 }) {
        this._httpClient.get(`${this.environment.api}/driver/description/${requestData.items}/${requestData.page}`, { headers: this.header })
            .subscribe(resp => {
            this._spinnerService.sendValue(true);
            this.driverData.next(resp);
        });
    }
    patchDataDriver(row) {
        return this._httpClient.patch(`${this.environment.api}/driver`, row, { headers: this.header });
    }
}
DriverService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: DriverService, deps: [{ token: i1.HttpClient }, { token: LocalStorageService }, { token: i3.SpinnerService }, { token: 'env' }], target: i0.ɵɵFactoryTarget.Injectable });
DriverService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: DriverService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: DriverService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: LocalStorageService }, { type: i3.SpinnerService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: ['env']
                }] }]; } });

class DriverComponent {
    constructor(_activate, _driverService, _spinnerService) {
        this._activate = _activate;
        this._driverService = _driverService;
        this._spinnerService = _spinnerService;
    }
    ngOnInit() {
        this._driverService.driverData.subscribe(drivers => {
            this.isLoading = this._spinnerService.isLoading;
            this.dataSourceDrivers = drivers.map((driver, index) => {
                const model = driver;
                return {
                    actions: this._actionTableListDriver(),
                    editable: false,
                    model: {
                        ...model,
                    },
                };
            });
        });
    }
    changePage(event) {
        this._driverService.getDataDriver({ items: event.pageSize, page: event.pageIndex + 1 });
    }
    newEntry() {
        let emptyEntry = {};
        emptyEntry.editable = true;
        emptyEntry.actions = this._actionTableListDriver();
        emptyEntry.model = {};
        this.dataSourceDrivers = [...this.dataSourceDrivers, emptyEntry];
        console.log(this.dataSourceDrivers);
    }
    _actionTableListDriver() {
        return [
            {
                iconClass: "fa_solid:gauge",
                classCss: "edit",
                method: (row) => {
                    row.editable = !row.editable;
                    if (!row.editable) {
                        this._driverService.patchDataDriver(row.model)
                            .subscribe();
                    }
                },
            },
        ];
    }
}
DriverComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: DriverComponent, deps: [{ token: i1$1.ActivatedRoute }, { token: DriverService }, { token: i3.SpinnerService }], target: i0.ɵɵFactoryTarget.Component });
DriverComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.3", type: DriverComponent, selector: "lib-driver", ngImport: i0, template: "<div class=\"driver-table-wrapper\" *ngIf=\"isLoading | async\">\n  <elix-table\n    [dataSource]=\"dataSourceDrivers\"\n    [showPagination]=\"true\"\n    [lenghtPagination]=\"dataSourceDrivers.length\"\n    (onPaginationChange)=\"changePage($event)\"\n    [addedNewEntry]=\"true\"\n    (onAddEntry)=\"newEntry()\"\n  >\n    <elix-column-text\n      className=\"fullName\"\n      [editRow]=\"true\"\n      field=\"name\"\n      name=\"Name\"\n    ></elix-column-text>\n    <elix-column-text\n      className=\"driverLicense\"\n      field=\"description\"\n      name=\"Driver License\"\n    ></elix-column-text>\n    <elix-column-two-cases\n      className=\"license\"\n      [editRow]=\"true\"\n      field=\"license\"\n      name=\"License\"\n    ></elix-column-two-cases>\n    <elix-column-icon-action\n      className=\"action\"\n      name=\"ACTION FIELD\"\n      field=\"action\"\n    ></elix-column-icon-action>\n  </elix-table>\n</div>\n\n<div *ngIf=\"!(isLoading | async)\">\n  <lib-spinner></lib-spinner>\n</div>\n", styles: [".driver-table-wrapper{box-shadow:#00000026 0 15px 25px,#0000000d 0 5px 10px}\n"], dependencies: [{ kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i5.TableComponent, selector: "elix-table", inputs: ["dataSource", "extensible", "extandble$", "footerShow", "footerMessageClass", "newElementExtandble", "showPagination", "lenghtPagination", "paginationClass", "addedNewEntry"], outputs: ["onAddEntry", "onPaginationChange"] }, { kind: "component", type: i5.ColumnTextComponent, selector: "elix-column-text", outputs: ["onValueChanges"] }, { kind: "component", type: i5.ColumnIconActionComponent, selector: "elix-column-icon-action" }, { kind: "component", type: i5.ColumnTwoCasesComponent, selector: "elix-column-two-cases", outputs: ["onValueChanges"] }, { kind: "component", type: i3.SpinnerComponent, selector: "lib-spinner" }, { kind: "pipe", type: i4.AsyncPipe, name: "async" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: DriverComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-driver', template: "<div class=\"driver-table-wrapper\" *ngIf=\"isLoading | async\">\n  <elix-table\n    [dataSource]=\"dataSourceDrivers\"\n    [showPagination]=\"true\"\n    [lenghtPagination]=\"dataSourceDrivers.length\"\n    (onPaginationChange)=\"changePage($event)\"\n    [addedNewEntry]=\"true\"\n    (onAddEntry)=\"newEntry()\"\n  >\n    <elix-column-text\n      className=\"fullName\"\n      [editRow]=\"true\"\n      field=\"name\"\n      name=\"Name\"\n    ></elix-column-text>\n    <elix-column-text\n      className=\"driverLicense\"\n      field=\"description\"\n      name=\"Driver License\"\n    ></elix-column-text>\n    <elix-column-two-cases\n      className=\"license\"\n      [editRow]=\"true\"\n      field=\"license\"\n      name=\"License\"\n    ></elix-column-two-cases>\n    <elix-column-icon-action\n      className=\"action\"\n      name=\"ACTION FIELD\"\n      field=\"action\"\n    ></elix-column-icon-action>\n  </elix-table>\n</div>\n\n<div *ngIf=\"!(isLoading | async)\">\n  <lib-spinner></lib-spinner>\n</div>\n", styles: [".driver-table-wrapper{box-shadow:#00000026 0 15px 25px,#0000000d 0 5px 10px}\n"] }]
        }], ctorParameters: function () { return [{ type: i1$1.ActivatedRoute }, { type: DriverService }, { type: i3.SpinnerService }]; } });

class DriversResolver {
    constructor(_driverService, _spinnerService) {
        this._driverService = _driverService;
        this._spinnerService = _spinnerService;
        this._spinnerService.sendValue(false);
    }
    resolve(route, state) {
        this._driverService.getDataDriver({ items: 10, page: 1 });
    }
}
DriversResolver.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: DriversResolver, deps: [{ token: DriverService }, { token: i3.SpinnerService }], target: i0.ɵɵFactoryTarget.Injectable });
DriversResolver.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: DriversResolver, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: DriversResolver, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: DriverService }, { type: i3.SpinnerService }]; } });

const routes = [
    {
        path: '',
        component: DriverComponent,
        resolve: { drivers: DriversResolver },
    },
];
class DriverRoutingModule {
}
DriverRoutingModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: DriverRoutingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
DriverRoutingModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "14.2.3", ngImport: i0, type: DriverRoutingModule, imports: [CommonModule, i1$1.RouterModule], exports: [RouterModule] });
DriverRoutingModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: DriverRoutingModule, imports: [CommonModule,
        RouterModule.forChild(routes), RouterModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: DriverRoutingModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        RouterModule.forChild(routes),
                    ],
                    exports: [
                        RouterModule,
                    ],
                }]
        }] });

class DriverModule {
}
DriverModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: DriverModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
DriverModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "14.2.3", ngImport: i0, type: DriverModule, declarations: [DriverComponent], imports: [CommonModule,
        DriverRoutingModule,
        TableMaterialModule,
        SpinnerModule], exports: [DriverComponent] });
DriverModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: DriverModule, imports: [CommonModule,
        DriverRoutingModule,
        TableMaterialModule,
        SpinnerModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: DriverModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [DriverComponent],
                    imports: [
                        CommonModule,
                        DriverRoutingModule,
                        TableMaterialModule,
                        SpinnerModule,
                    ], exports: [
                        DriverComponent,
                    ],
                }]
        }] });

class CoreDriverModule {
    constructor(parent) {
        if (parent) {
            throw new Error('Parent {CORE DRIVER MODULE } is loaded');
        }
    }
    static forRoot() {
        return {
            ngModule: DriverModule,
        };
    }
}
CoreDriverModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: CoreDriverModule, deps: [{ token: CoreDriverModule, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.NgModule });
CoreDriverModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "14.2.3", ngImport: i0, type: CoreDriverModule });
CoreDriverModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: CoreDriverModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: CoreDriverModule, decorators: [{
            type: NgModule,
            args: [{}]
        }], ctorParameters: function () { return [{ type: CoreDriverModule, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }]; } });

/*
 * Public API Surface of ngx-driver
 */

/**
 * Generated bundle index. Do not edit.
 */

export { CoreDriverModule, DriverComponent, DriverModule, LocalStorageService };
//# sourceMappingURL=ngx-driver.mjs.map
