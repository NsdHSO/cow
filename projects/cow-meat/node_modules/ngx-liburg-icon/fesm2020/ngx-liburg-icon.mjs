import * as i0 from '@angular/core';
import { Injectable, ErrorHandler, NgModule, Component } from '@angular/core';
import { Router, RouterModule } from '@angular/router';
import { HttpErrorResponse, HttpClientModule } from '@angular/common/http';
import * as i1 from '@angular/platform-browser';
import * as i2 from '@angular/material/icon';
import { MatIconModule } from '@angular/material/icon';
import { CommonModule } from '@angular/common';
import { BehaviorSubject } from 'rxjs';

class GlobalErrorHandleService {
    constructor(_injectable) {
        this._injectable = _injectable;
    }
    handleError(error) {
        const routerProperty = this._injectable.get(Router);
        console.warn(`${routerProperty.url}`);
        if (error instanceof HttpErrorResponse) {
            console.log(`Error from backend ${error.status}`);
            console.log(`Response body ${error.message}`);
        }
        else {
            console.warn(`An error occurred ${error.message}`);
        }
    }
}
GlobalErrorHandleService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: GlobalErrorHandleService, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });
GlobalErrorHandleService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: GlobalErrorHandleService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: GlobalErrorHandleService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i0.Injector }]; } });

class IconCoreModule {
    constructor(_domSanitizer, _matIconRegistry) {
        this._domSanitizer = _domSanitizer;
        this._matIconRegistry = _matIconRegistry;
        this._matIconRegistry.addSvgIconSetInNamespace('fa_brands', this._domSanitizer.bypassSecurityTrustResourceUrl('assets/icons/svgs/brands.svg'));
        this._matIconRegistry.addSvgIconSetInNamespace('fa_regular', this._domSanitizer.bypassSecurityTrustResourceUrl('assets/icons/svgs/regular.svg'));
        this._matIconRegistry.addSvgIconSetInNamespace('fa_solid', this._domSanitizer.bypassSecurityTrustResourceUrl('assets/icons/svgs/solid.svg'));
    }
}
IconCoreModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: IconCoreModule, deps: [{ token: i1.DomSanitizer }, { token: i2.MatIconRegistry }], target: i0.ɵɵFactoryTarget.NgModule });
IconCoreModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "14.2.3", ngImport: i0, type: IconCoreModule, imports: [HttpClientModule, RouterModule] });
IconCoreModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: IconCoreModule, providers: [{ provide: ErrorHandler, useClass: GlobalErrorHandleService }], imports: [HttpClientModule, RouterModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: IconCoreModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [HttpClientModule, RouterModule],
                    providers: [{ provide: ErrorHandler, useClass: GlobalErrorHandleService }],
                }]
        }], ctorParameters: function () { return [{ type: i1.DomSanitizer }, { type: i2.MatIconRegistry }]; } });

class SpinnerComponent {
}
SpinnerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: SpinnerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
SpinnerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.3", type: SpinnerComponent, selector: "lib-spinner", ngImport: i0, template: "<div class=\"spinner\">\n  <mat-icon\n    [svgIcon]=\"'fa_brands:ion'\"\n    class=\"spinner-rotation\"\n  ></mat-icon>\n</div>\n", styles: [".spinner{display:flex;align-content:center;justify-content:center;align-items:center}.spinner-rotation{width:6%;height:6%}\n"], dependencies: [{ kind: "component", type: i2.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: SpinnerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-spinner', template: "<div class=\"spinner\">\n  <mat-icon\n    [svgIcon]=\"'fa_brands:ion'\"\n    class=\"spinner-rotation\"\n  ></mat-icon>\n</div>\n", styles: [".spinner{display:flex;align-content:center;justify-content:center;align-items:center}.spinner-rotation{width:6%;height:6%}\n"] }]
        }] });

class SpinnerModule {
}
SpinnerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: SpinnerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
SpinnerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "14.2.3", ngImport: i0, type: SpinnerModule, declarations: [SpinnerComponent], imports: [CommonModule,
        MatIconModule], exports: [SpinnerComponent] });
SpinnerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: SpinnerModule, imports: [CommonModule,
        MatIconModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: SpinnerModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        SpinnerComponent,
                    ],
                    imports: [
                        CommonModule,
                        MatIconModule,
                    ],
                    exports: [
                        SpinnerComponent,
                    ],
                }]
        }] });

class SpinnerService {
    constructor() {
        this._isLoading = new BehaviorSubject(false);
    }
    get isLoading() {
        return this._isLoading;
    }
    set isLoading(value) {
        this._isLoading = value;
    }
    sendValue(value) {
        this._isLoading.next(value);
    }
}
SpinnerService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: SpinnerService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
SpinnerService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: SpinnerService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.3", ngImport: i0, type: SpinnerService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });

/*
 * Public API Surface of ngx-liburg-icon
 */

/**
 * Generated bundle index. Do not edit.
 */

export { GlobalErrorHandleService, IconCoreModule, SpinnerComponent, SpinnerModule, SpinnerService };
//# sourceMappingURL=ngx-liburg-icon.mjs.map
